/*
 * This source file was generated by the Gradle 'init' task
 */
package midterm;

import java.util.LinkedList;
import java.util.Queue;

public class CompleteBinaryTree {

    private Node root;

    public CompleteBinaryTree() {
        this.root = null;
    }

    public CompleteBinaryTree(int data) {
        this.root = new Node(data);
    }

    public Node getRoot() {
        return root;
    }

    public void insert(int data) {
        if (root == null) {
            root = new Node(data);
            return;
        }

        Node temp = root;
        Queue<Node> queue = new LinkedList<>();
        queue.add(temp);

        while (!queue.isEmpty()) {
            temp = queue.poll();

            if (temp.left == null) {
                temp.left = new Node(data);
                break;
            } else {
                queue.add(temp.left);
            }

            if (temp.right == null) {
                temp.right = new Node(data);
                break;
            } else {
                queue.add(temp.right);
            }
        }
    }
    
    public void delete(int data) {
        if (root == null) {
            return;
        }

        Node temp = root;
        Node keyNode = null;
        Node lastNode = null;
        Queue<Node> queue = new LinkedList<>();
        queue.add(temp);

        while (!queue.isEmpty()) {
            temp = queue.poll();

            if (temp.data == data) 
                keyNode = temp;

            if (temp.left != null) 
                queue.add(temp.left);

            if (temp.right != null) 
                queue.add(temp.right);

            lastNode = temp;
        }

        if (keyNode == null)
            return;

        keyNode.data = lastNode.data;
        deleteLastNode(lastNode);
    }

    private void deleteLastNode(Node lastNode) {
        Node temp = root;
        Queue<Node> queue = new LinkedList<>();
        queue.add(temp);

        while (!queue.isEmpty()) {
            temp = queue.poll();

            if (temp.left == lastNode) {
                temp.left = null;
                break;
            } else if (temp.left != null)
                queue.add(temp.left);

            if (temp.right == lastNode) {
                temp.right = null;
                break;
            } else if (temp.right != null)
                queue.add(temp.right);
        }
    }


    public String toString() {
        return toString(root);
    }

    private String toString(Node root) {
        String str = "";
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            Node temp = queue.poll();
            str += temp.data + " ";

            if (temp.left != null) 
                queue.add(temp.left);

            if (temp.right != null) 
                queue.add(temp.right);
        }
        return str;
    }

    public Boolean question1(){
        return is_max_heap(this.root);
    }

    private Boolean is_max_heap(Node curr){
        if (curr == null){
            return true;
        }
        

        else if (curr.left != null && curr.left.data > curr.data){
            return false;
        }
        

        else if (curr.right != null && curr.right.data > curr.data){
            return false;
        }

        else if (curr.left != null){
            is_max_heap(curr.left);
        }
        else if (curr.right != null){
            is_max_heap(curr.right);
        }
        if (curr.data > this.root.data){
            return false;
        }
        return true;

    }

    public CompleteBinaryTree question2(){
        CompleteBinaryTree newtree = copy(this.root);

        return newtree;

    }

    private CompleteBinaryTree copy(Node curr){
        CompleteBinaryTree newtree = new CompleteBinaryTree();
        newtree.insert(curr.data);
        if (curr.left != null){
            newtree.insert(curr.left.data);
            copy(curr.left);
        }
        else if (curr.right != null){
            newtree.insert(curr.right.data);
            copy(curr.right);
        }
        return newtree;
        
    }


    public static void main(String[] args) {
        CompleteBinaryTree tree = new CompleteBinaryTree();
        tree.insert(9);
        tree.insert(6);
        tree.insert(3);
        tree.insert(8);
        tree.insert(1);

        System.out.println(tree.toString());
    }
}
